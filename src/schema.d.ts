/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  me?: GQLUser;
  userProfile?: GQLUser;
  users: Array<GQLUser>;
  post?: GQLPost;
  feed: GQLFeed;
}

export interface GQLUser {
  avatar?: string;
  email?: string;
  facebookId?: string;
  id: string;
  name: string;
  posts?: Array<GQLPost>;
  bookmarks?: Array<GQLBookmark>;
}

export interface GQLPost {
  id: string;
  address?: GQLAddress;
  postedBy: GQLUser;
  title: string;
  title_normalized: string;
  createdAt: GQLDateTime;
  updatedAt: GQLDateTime;
  startsAt: GQLDateTime;
  endsAt: GQLDateTime;
  geolocation?: GQLGeolocation;
  bookmarks?: Array<GQLBookmark>;
  photos?: Array<GQLPhoto>;
  tags?: Array<GQLTag>;
  active: boolean;
}

export interface GQLAddress {
  post: GQLPost;
  singleLine: string;
  streetAddress: string;
  city: string;
  stateProvince: string;
  postalCode: string;
  country: string;
}

export type GQLDateTime = any;

export interface GQLGeolocation {
  id: string;
  lat: number;
  long: number;
}

export interface GQLBookmarkWhereInput {
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  user?: GQLUserWhereInput;
  post?: GQLPostWhereInput;
  AND?: Array<GQLBookmarkWhereInput>;
  OR?: Array<GQLBookmarkWhereInput>;
  NOT?: Array<GQLBookmarkWhereInput>;
}

export interface GQLUserWhereInput {
  avatar?: string;
  avatar_not?: string;
  avatar_in?: Array<string>;
  avatar_not_in?: Array<string>;
  avatar_lt?: string;
  avatar_lte?: string;
  avatar_gt?: string;
  avatar_gte?: string;
  avatar_contains?: string;
  avatar_not_contains?: string;
  avatar_starts_with?: string;
  avatar_not_starts_with?: string;
  avatar_ends_with?: string;
  avatar_not_ends_with?: string;
  email?: string;
  email_not?: string;
  email_in?: Array<string>;
  email_not_in?: Array<string>;
  email_lt?: string;
  email_lte?: string;
  email_gt?: string;
  email_gte?: string;
  email_contains?: string;
  email_not_contains?: string;
  email_starts_with?: string;
  email_not_starts_with?: string;
  email_ends_with?: string;
  email_not_ends_with?: string;
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  name?: string;
  name_not?: string;
  name_in?: Array<string>;
  name_not_in?: Array<string>;
  name_lt?: string;
  name_lte?: string;
  name_gt?: string;
  name_gte?: string;
  name_contains?: string;
  name_not_contains?: string;
  name_starts_with?: string;
  name_not_starts_with?: string;
  name_ends_with?: string;
  name_not_ends_with?: string;
  password?: string;
  password_not?: string;
  password_in?: Array<string>;
  password_not_in?: Array<string>;
  password_lt?: string;
  password_lte?: string;
  password_gt?: string;
  password_gte?: string;
  password_contains?: string;
  password_not_contains?: string;
  password_starts_with?: string;
  password_not_starts_with?: string;
  password_ends_with?: string;
  password_not_ends_with?: string;
  facebookId?: string;
  facebookId_not?: string;
  facebookId_in?: Array<string>;
  facebookId_not_in?: Array<string>;
  facebookId_lt?: string;
  facebookId_lte?: string;
  facebookId_gt?: string;
  facebookId_gte?: string;
  facebookId_contains?: string;
  facebookId_not_contains?: string;
  facebookId_starts_with?: string;
  facebookId_not_starts_with?: string;
  facebookId_ends_with?: string;
  facebookId_not_ends_with?: string;
  bookmarks_every?: GQLBookmarkWhereInput;
  bookmarks_some?: GQLBookmarkWhereInput;
  bookmarks_none?: GQLBookmarkWhereInput;
  posts_every?: GQLPostWhereInput;
  posts_some?: GQLPostWhereInput;
  posts_none?: GQLPostWhereInput;
  AND?: Array<GQLUserWhereInput>;
  OR?: Array<GQLUserWhereInput>;
  NOT?: Array<GQLUserWhereInput>;
}

export interface GQLPostWhereInput {
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  address?: GQLAddressWhereInput;
  postedBy?: GQLUserWhereInput;
  title?: string;
  title_not?: string;
  title_in?: Array<string>;
  title_not_in?: Array<string>;
  title_lt?: string;
  title_lte?: string;
  title_gt?: string;
  title_gte?: string;
  title_contains?: string;
  title_not_contains?: string;
  title_starts_with?: string;
  title_not_starts_with?: string;
  title_ends_with?: string;
  title_not_ends_with?: string;
  title_normalized?: string;
  title_normalized_not?: string;
  title_normalized_in?: Array<string>;
  title_normalized_not_in?: Array<string>;
  title_normalized_lt?: string;
  title_normalized_lte?: string;
  title_normalized_gt?: string;
  title_normalized_gte?: string;
  title_normalized_contains?: string;
  title_normalized_not_contains?: string;
  title_normalized_starts_with?: string;
  title_normalized_not_starts_with?: string;
  title_normalized_ends_with?: string;
  title_normalized_not_ends_with?: string;
  createdAt?: GQLDateTime;
  createdAt_not?: GQLDateTime;
  createdAt_in?: Array<GQLDateTime>;
  createdAt_not_in?: Array<GQLDateTime>;
  createdAt_lt?: GQLDateTime;
  createdAt_lte?: GQLDateTime;
  createdAt_gt?: GQLDateTime;
  createdAt_gte?: GQLDateTime;
  updatedAt?: GQLDateTime;
  updatedAt_not?: GQLDateTime;
  updatedAt_in?: Array<GQLDateTime>;
  updatedAt_not_in?: Array<GQLDateTime>;
  updatedAt_lt?: GQLDateTime;
  updatedAt_lte?: GQLDateTime;
  updatedAt_gt?: GQLDateTime;
  updatedAt_gte?: GQLDateTime;
  startsAt?: GQLDateTime;
  startsAt_not?: GQLDateTime;
  startsAt_in?: Array<GQLDateTime>;
  startsAt_not_in?: Array<GQLDateTime>;
  startsAt_lt?: GQLDateTime;
  startsAt_lte?: GQLDateTime;
  startsAt_gt?: GQLDateTime;
  startsAt_gte?: GQLDateTime;
  endsAt?: GQLDateTime;
  endsAt_not?: GQLDateTime;
  endsAt_in?: Array<GQLDateTime>;
  endsAt_not_in?: Array<GQLDateTime>;
  endsAt_lt?: GQLDateTime;
  endsAt_lte?: GQLDateTime;
  endsAt_gt?: GQLDateTime;
  endsAt_gte?: GQLDateTime;
  geolocation?: GQLGeolocationWhereInput;
  bookmarks_every?: GQLBookmarkWhereInput;
  bookmarks_some?: GQLBookmarkWhereInput;
  bookmarks_none?: GQLBookmarkWhereInput;
  photos_every?: GQLPhotoWhereInput;
  photos_some?: GQLPhotoWhereInput;
  photos_none?: GQLPhotoWhereInput;
  tags_every?: GQLTagWhereInput;
  tags_some?: GQLTagWhereInput;
  tags_none?: GQLTagWhereInput;
  active?: boolean;
  active_not?: boolean;
  AND?: Array<GQLPostWhereInput>;
  OR?: Array<GQLPostWhereInput>;
  NOT?: Array<GQLPostWhereInput>;
}

export interface GQLAddressWhereInput {
  post?: GQLPostWhereInput;
  singleLine?: string;
  singleLine_not?: string;
  singleLine_in?: Array<string>;
  singleLine_not_in?: Array<string>;
  singleLine_lt?: string;
  singleLine_lte?: string;
  singleLine_gt?: string;
  singleLine_gte?: string;
  singleLine_contains?: string;
  singleLine_not_contains?: string;
  singleLine_starts_with?: string;
  singleLine_not_starts_with?: string;
  singleLine_ends_with?: string;
  singleLine_not_ends_with?: string;
  streetAddress?: string;
  streetAddress_not?: string;
  streetAddress_in?: Array<string>;
  streetAddress_not_in?: Array<string>;
  streetAddress_lt?: string;
  streetAddress_lte?: string;
  streetAddress_gt?: string;
  streetAddress_gte?: string;
  streetAddress_contains?: string;
  streetAddress_not_contains?: string;
  streetAddress_starts_with?: string;
  streetAddress_not_starts_with?: string;
  streetAddress_ends_with?: string;
  streetAddress_not_ends_with?: string;
  city?: string;
  city_not?: string;
  city_in?: Array<string>;
  city_not_in?: Array<string>;
  city_lt?: string;
  city_lte?: string;
  city_gt?: string;
  city_gte?: string;
  city_contains?: string;
  city_not_contains?: string;
  city_starts_with?: string;
  city_not_starts_with?: string;
  city_ends_with?: string;
  city_not_ends_with?: string;
  stateProvince?: string;
  stateProvince_not?: string;
  stateProvince_in?: Array<string>;
  stateProvince_not_in?: Array<string>;
  stateProvince_lt?: string;
  stateProvince_lte?: string;
  stateProvince_gt?: string;
  stateProvince_gte?: string;
  stateProvince_contains?: string;
  stateProvince_not_contains?: string;
  stateProvince_starts_with?: string;
  stateProvince_not_starts_with?: string;
  stateProvince_ends_with?: string;
  stateProvince_not_ends_with?: string;
  postalCode?: string;
  postalCode_not?: string;
  postalCode_in?: Array<string>;
  postalCode_not_in?: Array<string>;
  postalCode_lt?: string;
  postalCode_lte?: string;
  postalCode_gt?: string;
  postalCode_gte?: string;
  postalCode_contains?: string;
  postalCode_not_contains?: string;
  postalCode_starts_with?: string;
  postalCode_not_starts_with?: string;
  postalCode_ends_with?: string;
  postalCode_not_ends_with?: string;
  country?: string;
  country_not?: string;
  country_in?: Array<string>;
  country_not_in?: Array<string>;
  country_lt?: string;
  country_lte?: string;
  country_gt?: string;
  country_gte?: string;
  country_contains?: string;
  country_not_contains?: string;
  country_starts_with?: string;
  country_not_starts_with?: string;
  country_ends_with?: string;
  country_not_ends_with?: string;
  AND?: Array<GQLAddressWhereInput>;
  OR?: Array<GQLAddressWhereInput>;
  NOT?: Array<GQLAddressWhereInput>;
}

export interface GQLGeolocationWhereInput {
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  lat?: number;
  lat_not?: number;
  lat_in?: Array<number>;
  lat_not_in?: Array<number>;
  lat_lt?: number;
  lat_lte?: number;
  lat_gt?: number;
  lat_gte?: number;
  long?: number;
  long_not?: number;
  long_in?: Array<number>;
  long_not_in?: Array<number>;
  long_lt?: number;
  long_lte?: number;
  long_gt?: number;
  long_gte?: number;
  AND?: Array<GQLGeolocationWhereInput>;
  OR?: Array<GQLGeolocationWhereInput>;
  NOT?: Array<GQLGeolocationWhereInput>;
}

export interface GQLPhotoWhereInput {
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  url?: string;
  url_not?: string;
  url_in?: Array<string>;
  url_not_in?: Array<string>;
  url_lt?: string;
  url_lte?: string;
  url_gt?: string;
  url_gte?: string;
  url_contains?: string;
  url_not_contains?: string;
  url_starts_with?: string;
  url_not_starts_with?: string;
  url_ends_with?: string;
  url_not_ends_with?: string;
  postedBy?: GQLUserWhereInput;
  post?: GQLPostWhereInput;
  title?: string;
  title_not?: string;
  title_in?: Array<string>;
  title_not_in?: Array<string>;
  title_lt?: string;
  title_lte?: string;
  title_gt?: string;
  title_gte?: string;
  title_contains?: string;
  title_not_contains?: string;
  title_starts_with?: string;
  title_not_starts_with?: string;
  title_ends_with?: string;
  title_not_ends_with?: string;
  description?: string;
  description_not?: string;
  description_in?: Array<string>;
  description_not_in?: Array<string>;
  description_lt?: string;
  description_lte?: string;
  description_gt?: string;
  description_gte?: string;
  description_contains?: string;
  description_not_contains?: string;
  description_starts_with?: string;
  description_not_starts_with?: string;
  description_ends_with?: string;
  description_not_ends_with?: string;
  price?: number;
  price_not?: number;
  price_in?: Array<number>;
  price_not_in?: Array<number>;
  price_lt?: number;
  price_lte?: number;
  price_gt?: number;
  price_gte?: number;
  currency?: GQLCurrencyEnum;
  currency_not?: GQLCurrencyEnum;
  currency_in?: Array<GQLCurrencyEnum>;
  currency_not_in?: Array<GQLCurrencyEnum>;
  active?: boolean;
  active_not?: boolean;
  AND?: Array<GQLPhotoWhereInput>;
  OR?: Array<GQLPhotoWhereInput>;
  NOT?: Array<GQLPhotoWhereInput>;
}

export enum GQLCurrencyEnum {
  USD = 'USD',
  EUR = 'EUR',
  CAD = 'CAD',
  GBP = 'GBP',
  AUD = 'AUD'
}

export interface GQLTagWhereInput {
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  name?: string;
  name_not?: string;
  name_in?: Array<string>;
  name_not_in?: Array<string>;
  name_lt?: string;
  name_lte?: string;
  name_gt?: string;
  name_gte?: string;
  name_contains?: string;
  name_not_contains?: string;
  name_starts_with?: string;
  name_not_starts_with?: string;
  name_ends_with?: string;
  name_not_ends_with?: string;
  AND?: Array<GQLTagWhereInput>;
  OR?: Array<GQLTagWhereInput>;
  NOT?: Array<GQLTagWhereInput>;
}

export enum GQLBookmarkOrderByInput {
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLBookmark {
  id: string;
  user: GQLUser;
  post: GQLPost;
}

export enum GQLPhotoOrderByInput {
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  url_ASC = 'url_ASC',
  url_DESC = 'url_DESC',
  title_ASC = 'title_ASC',
  title_DESC = 'title_DESC',
  description_ASC = 'description_ASC',
  description_DESC = 'description_DESC',
  price_ASC = 'price_ASC',
  price_DESC = 'price_DESC',
  currency_ASC = 'currency_ASC',
  currency_DESC = 'currency_DESC',
  active_ASC = 'active_ASC',
  active_DESC = 'active_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLPhoto {
  id: string;
  url: string;
  postedBy: GQLUser;
  post: GQLPost;
  title?: string;
  description?: string;
  price?: number;
  currency?: GQLCurrencyEnum;
  active: boolean;
}

export enum GQLTagOrderByInput {
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLTag {
  id: string;
  name: string;
}

export enum GQLPostOrderByInput {
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  title_ASC = 'title_ASC',
  title_DESC = 'title_DESC',
  title_normalized_ASC = 'title_normalized_ASC',
  title_normalized_DESC = 'title_normalized_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  startsAt_ASC = 'startsAt_ASC',
  startsAt_DESC = 'startsAt_DESC',
  endsAt_ASC = 'endsAt_ASC',
  endsAt_DESC = 'endsAt_DESC',
  active_ASC = 'active_ASC',
  active_DESC = 'active_DESC'
}

export interface GQLFeed {
  posts: Array<GQLPost>;
  count: number;
}

export interface GQLMutation {
  editProfile: GQLUser;
  createPost: GQLPost;
  editPost: GQLPost;
  editPhoto: GQLPhoto;
  addPhoto: GQLPhoto;
  deletePost: GQLPost;
  deletePhoto: GQLPhoto;
  createBookmark: GQLBookmark;
  deleteBookmark?: GQLBookmark;
}

export interface GQLCreatePhotoInput {
  url?: string;
  file?: GQLUpload;
  title?: string;
  description?: string;
  price?: number;
  currency?: GQLCurrencyEnum;
}

export type GQLUpload = any;

export interface GQLGeolocationCreateInput {
  lat: number;
  long: number;
}

export interface GQLAddressCreateWithoutPostInput {
  singleLine: string;
  streetAddress: string;
  city: string;
  stateProvince: string;
  postalCode: string;
  country: string;
}

export interface GQLAddressUpdateOneWithoutPostInput {
  create?: GQLAddressCreateWithoutPostInput;
  update?: GQLAddressUpdateWithoutPostDataInput;
  upsert?: GQLAddressUpsertWithoutPostInput;
  delete?: boolean;
  disconnect?: boolean;
}

export interface GQLAddressUpdateWithoutPostDataInput {
  singleLine?: string;
  streetAddress?: string;
  city?: string;
  stateProvince?: string;
  postalCode?: string;
  country?: string;
}

export interface GQLAddressUpsertWithoutPostInput {
  update: GQLAddressUpdateWithoutPostDataInput;
  create: GQLAddressCreateWithoutPostInput;
}

export interface GQLUserUpdateOneRequiredWithoutPostsInput {
  create?: GQLUserCreateWithoutPostsInput;
  update?: GQLUserUpdateWithoutPostsDataInput;
  upsert?: GQLUserUpsertWithoutPostsInput;
  connect?: GQLUserWhereUniqueInput;
}

export interface GQLUserCreateWithoutPostsInput {
  avatar?: string;
  email?: string;
  name: string;
  password?: string;
  facebookId?: string;
  bookmarks?: GQLBookmarkCreateManyWithoutUserInput;
}

export interface GQLBookmarkCreateManyWithoutUserInput {
  create?: Array<GQLBookmarkCreateWithoutUserInput>;
  connect?: Array<GQLBookmarkWhereUniqueInput>;
}

export interface GQLBookmarkCreateWithoutUserInput {
  post: GQLPostCreateOneWithoutBookmarksInput;
}

export interface GQLPostCreateOneWithoutBookmarksInput {
  create?: GQLPostCreateWithoutBookmarksInput;
  connect?: GQLPostWhereUniqueInput;
}

export interface GQLPostCreateWithoutBookmarksInput {
  address?: GQLAddressCreateOneWithoutPostInput;
  postedBy: GQLUserCreateOneWithoutPostsInput;
  title: string;
  title_normalized: string;
  startsAt: GQLDateTime;
  endsAt: GQLDateTime;
  geolocation?: GQLGeolocationCreateOneInput;
  photos?: GQLPhotoCreateManyWithoutPostInput;
  tags?: GQLTagCreateManyInput;
  active?: boolean;
}

export interface GQLAddressCreateOneWithoutPostInput {
  create?: GQLAddressCreateWithoutPostInput;
}

export interface GQLUserCreateOneWithoutPostsInput {
  create?: GQLUserCreateWithoutPostsInput;
  connect?: GQLUserWhereUniqueInput;
}

export interface GQLUserWhereUniqueInput {
  email?: string;
  id?: string;
  facebookId?: string;
}

export interface GQLGeolocationCreateOneInput {
  create?: GQLGeolocationCreateInput;
  connect?: GQLGeolocationWhereUniqueInput;
}

export interface GQLGeolocationWhereUniqueInput {
  id?: string;
}

export interface GQLPhotoCreateManyWithoutPostInput {
  create?: Array<GQLPhotoCreateWithoutPostInput>;
  connect?: Array<GQLPhotoWhereUniqueInput>;
}

export interface GQLPhotoCreateWithoutPostInput {
  url: string;
  postedBy: GQLUserCreateOneInput;
  title?: string;
  description?: string;
  price?: number;
  currency?: GQLCurrencyEnum;
  active?: boolean;
}

export interface GQLUserCreateOneInput {
  create?: GQLUserCreateInput;
  connect?: GQLUserWhereUniqueInput;
}

export interface GQLUserCreateInput {
  avatar?: string;
  email?: string;
  name: string;
  password?: string;
  facebookId?: string;
  bookmarks?: GQLBookmarkCreateManyWithoutUserInput;
  posts?: GQLPostCreateManyWithoutPostedByInput;
}

export interface GQLPostCreateManyWithoutPostedByInput {
  create?: Array<GQLPostCreateWithoutPostedByInput>;
  connect?: Array<GQLPostWhereUniqueInput>;
}

export interface GQLPostCreateWithoutPostedByInput {
  address?: GQLAddressCreateOneWithoutPostInput;
  title: string;
  title_normalized: string;
  startsAt: GQLDateTime;
  endsAt: GQLDateTime;
  geolocation?: GQLGeolocationCreateOneInput;
  bookmarks?: GQLBookmarkCreateManyWithoutPostInput;
  photos?: GQLPhotoCreateManyWithoutPostInput;
  tags?: GQLTagCreateManyInput;
  active?: boolean;
}

export interface GQLBookmarkCreateManyWithoutPostInput {
  create?: Array<GQLBookmarkCreateWithoutPostInput>;
  connect?: Array<GQLBookmarkWhereUniqueInput>;
}

export interface GQLBookmarkCreateWithoutPostInput {
  user: GQLUserCreateOneWithoutBookmarksInput;
}

export interface GQLUserCreateOneWithoutBookmarksInput {
  create?: GQLUserCreateWithoutBookmarksInput;
  connect?: GQLUserWhereUniqueInput;
}

export interface GQLUserCreateWithoutBookmarksInput {
  avatar?: string;
  email?: string;
  name: string;
  password?: string;
  facebookId?: string;
  posts?: GQLPostCreateManyWithoutPostedByInput;
}

export interface GQLBookmarkWhereUniqueInput {
  id?: string;
}

export interface GQLTagCreateManyInput {
  create?: Array<GQLTagCreateInput>;
  connect?: Array<GQLTagWhereUniqueInput>;
}

export interface GQLTagCreateInput {
  name: string;
}

export interface GQLTagWhereUniqueInput {
  id?: string;
}

export interface GQLPostWhereUniqueInput {
  id?: string;
}

export interface GQLPhotoWhereUniqueInput {
  id?: string;
}

export interface GQLUserUpdateWithoutPostsDataInput {
  avatar?: string;
  email?: string;
  name?: string;
  password?: string;
  facebookId?: string;
  bookmarks?: GQLBookmarkUpdateManyWithoutUserInput;
}

export interface GQLBookmarkUpdateManyWithoutUserInput {
  create?: Array<GQLBookmarkCreateWithoutUserInput>;
  delete?: Array<GQLBookmarkWhereUniqueInput>;
  connect?: Array<GQLBookmarkWhereUniqueInput>;
  disconnect?: Array<GQLBookmarkWhereUniqueInput>;
  update?: Array<GQLBookmarkUpdateWithWhereUniqueWithoutUserInput>;
  upsert?: Array<GQLBookmarkUpsertWithWhereUniqueWithoutUserInput>;
}

export interface GQLBookmarkUpdateWithWhereUniqueWithoutUserInput {
  where: GQLBookmarkWhereUniqueInput;
  data: GQLBookmarkUpdateWithoutUserDataInput;
}

export interface GQLBookmarkUpdateWithoutUserDataInput {
  post?: GQLPostUpdateOneRequiredWithoutBookmarksInput;
}

export interface GQLPostUpdateOneRequiredWithoutBookmarksInput {
  create?: GQLPostCreateWithoutBookmarksInput;
  update?: GQLPostUpdateWithoutBookmarksDataInput;
  upsert?: GQLPostUpsertWithoutBookmarksInput;
  connect?: GQLPostWhereUniqueInput;
}

export interface GQLPostUpdateWithoutBookmarksDataInput {
  address?: GQLAddressUpdateOneWithoutPostInput;
  postedBy?: GQLUserUpdateOneRequiredWithoutPostsInput;
  title?: string;
  title_normalized?: string;
  startsAt?: GQLDateTime;
  endsAt?: GQLDateTime;
  geolocation?: GQLGeolocationUpdateOneInput;
  photos?: GQLPhotoUpdateManyWithoutPostInput;
  tags?: GQLTagUpdateManyInput;
  active?: boolean;
}

export interface GQLGeolocationUpdateOneInput {
  create?: GQLGeolocationCreateInput;
  update?: GQLGeolocationUpdateDataInput;
  upsert?: GQLGeolocationUpsertNestedInput;
  delete?: boolean;
  disconnect?: boolean;
  connect?: GQLGeolocationWhereUniqueInput;
}

export interface GQLGeolocationUpdateDataInput {
  lat?: number;
  long?: number;
}

export interface GQLGeolocationUpsertNestedInput {
  update: GQLGeolocationUpdateDataInput;
  create: GQLGeolocationCreateInput;
}

export interface GQLPhotoUpdateManyWithoutPostInput {
  create?: Array<GQLPhotoCreateWithoutPostInput>;
  delete?: Array<GQLPhotoWhereUniqueInput>;
  connect?: Array<GQLPhotoWhereUniqueInput>;
  disconnect?: Array<GQLPhotoWhereUniqueInput>;
  update?: Array<GQLPhotoUpdateWithWhereUniqueWithoutPostInput>;
  upsert?: Array<GQLPhotoUpsertWithWhereUniqueWithoutPostInput>;
}

export interface GQLPhotoUpdateWithWhereUniqueWithoutPostInput {
  where: GQLPhotoWhereUniqueInput;
  data: GQLPhotoUpdateWithoutPostDataInput;
}

export interface GQLPhotoUpdateWithoutPostDataInput {
  url?: string;
  postedBy?: GQLUserUpdateOneRequiredInput;
  title?: string;
  description?: string;
  price?: number;
  currency?: GQLCurrencyEnum;
  active?: boolean;
}

export interface GQLUserUpdateOneRequiredInput {
  create?: GQLUserCreateInput;
  update?: GQLUserUpdateDataInput;
  upsert?: GQLUserUpsertNestedInput;
  connect?: GQLUserWhereUniqueInput;
}

export interface GQLUserUpdateDataInput {
  avatar?: string;
  email?: string;
  name?: string;
  password?: string;
  facebookId?: string;
  bookmarks?: GQLBookmarkUpdateManyWithoutUserInput;
  posts?: GQLPostUpdateManyWithoutPostedByInput;
}

export interface GQLPostUpdateManyWithoutPostedByInput {
  create?: Array<GQLPostCreateWithoutPostedByInput>;
  delete?: Array<GQLPostWhereUniqueInput>;
  connect?: Array<GQLPostWhereUniqueInput>;
  disconnect?: Array<GQLPostWhereUniqueInput>;
  update?: Array<GQLPostUpdateWithWhereUniqueWithoutPostedByInput>;
  upsert?: Array<GQLPostUpsertWithWhereUniqueWithoutPostedByInput>;
}

export interface GQLPostUpdateWithWhereUniqueWithoutPostedByInput {
  where: GQLPostWhereUniqueInput;
  data: GQLPostUpdateWithoutPostedByDataInput;
}

export interface GQLPostUpdateWithoutPostedByDataInput {
  address?: GQLAddressUpdateOneWithoutPostInput;
  title?: string;
  title_normalized?: string;
  startsAt?: GQLDateTime;
  endsAt?: GQLDateTime;
  geolocation?: GQLGeolocationUpdateOneInput;
  bookmarks?: GQLBookmarkUpdateManyWithoutPostInput;
  photos?: GQLPhotoUpdateManyWithoutPostInput;
  tags?: GQLTagUpdateManyInput;
  active?: boolean;
}

export interface GQLBookmarkUpdateManyWithoutPostInput {
  create?: Array<GQLBookmarkCreateWithoutPostInput>;
  delete?: Array<GQLBookmarkWhereUniqueInput>;
  connect?: Array<GQLBookmarkWhereUniqueInput>;
  disconnect?: Array<GQLBookmarkWhereUniqueInput>;
  update?: Array<GQLBookmarkUpdateWithWhereUniqueWithoutPostInput>;
  upsert?: Array<GQLBookmarkUpsertWithWhereUniqueWithoutPostInput>;
}

export interface GQLBookmarkUpdateWithWhereUniqueWithoutPostInput {
  where: GQLBookmarkWhereUniqueInput;
  data: GQLBookmarkUpdateWithoutPostDataInput;
}

export interface GQLBookmarkUpdateWithoutPostDataInput {
  user?: GQLUserUpdateOneRequiredWithoutBookmarksInput;
}

export interface GQLUserUpdateOneRequiredWithoutBookmarksInput {
  create?: GQLUserCreateWithoutBookmarksInput;
  update?: GQLUserUpdateWithoutBookmarksDataInput;
  upsert?: GQLUserUpsertWithoutBookmarksInput;
  connect?: GQLUserWhereUniqueInput;
}

export interface GQLUserUpdateWithoutBookmarksDataInput {
  avatar?: string;
  email?: string;
  name?: string;
  password?: string;
  facebookId?: string;
  posts?: GQLPostUpdateManyWithoutPostedByInput;
}

export interface GQLUserUpsertWithoutBookmarksInput {
  update: GQLUserUpdateWithoutBookmarksDataInput;
  create: GQLUserCreateWithoutBookmarksInput;
}

export interface GQLBookmarkUpsertWithWhereUniqueWithoutPostInput {
  where: GQLBookmarkWhereUniqueInput;
  update: GQLBookmarkUpdateWithoutPostDataInput;
  create: GQLBookmarkCreateWithoutPostInput;
}

export interface GQLTagUpdateManyInput {
  create?: Array<GQLTagCreateInput>;
  update?: Array<GQLTagUpdateWithWhereUniqueNestedInput>;
  upsert?: Array<GQLTagUpsertWithWhereUniqueNestedInput>;
  delete?: Array<GQLTagWhereUniqueInput>;
  connect?: Array<GQLTagWhereUniqueInput>;
  disconnect?: Array<GQLTagWhereUniqueInput>;
}

export interface GQLTagUpdateWithWhereUniqueNestedInput {
  where: GQLTagWhereUniqueInput;
  data: GQLTagUpdateDataInput;
}

export interface GQLTagUpdateDataInput {
  name?: string;
}

export interface GQLTagUpsertWithWhereUniqueNestedInput {
  where: GQLTagWhereUniqueInput;
  update: GQLTagUpdateDataInput;
  create: GQLTagCreateInput;
}

export interface GQLPostUpsertWithWhereUniqueWithoutPostedByInput {
  where: GQLPostWhereUniqueInput;
  update: GQLPostUpdateWithoutPostedByDataInput;
  create: GQLPostCreateWithoutPostedByInput;
}

export interface GQLUserUpsertNestedInput {
  update: GQLUserUpdateDataInput;
  create: GQLUserCreateInput;
}

export interface GQLPhotoUpsertWithWhereUniqueWithoutPostInput {
  where: GQLPhotoWhereUniqueInput;
  update: GQLPhotoUpdateWithoutPostDataInput;
  create: GQLPhotoCreateWithoutPostInput;
}

export interface GQLPostUpsertWithoutBookmarksInput {
  update: GQLPostUpdateWithoutBookmarksDataInput;
  create: GQLPostCreateWithoutBookmarksInput;
}

export interface GQLBookmarkUpsertWithWhereUniqueWithoutUserInput {
  where: GQLBookmarkWhereUniqueInput;
  update: GQLBookmarkUpdateWithoutUserDataInput;
  create: GQLBookmarkCreateWithoutUserInput;
}

export interface GQLUserUpsertWithoutPostsInput {
  update: GQLUserUpdateWithoutPostsDataInput;
  create: GQLUserCreateWithoutPostsInput;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  User?: GQLUserTypeResolver;
  Post?: GQLPostTypeResolver;
  Address?: GQLAddressTypeResolver;
  DateTime?: GraphQLScalarType;
  Geolocation?: GQLGeolocationTypeResolver;
  Bookmark?: GQLBookmarkTypeResolver;
  Photo?: GQLPhotoTypeResolver;
  Tag?: GQLTagTypeResolver;
  Feed?: GQLFeedTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Upload?: GraphQLScalarType;
}
export interface GQLQueryTypeResolver<TParent = any> {
  me?: QueryToMeResolver<TParent>;
  userProfile?: QueryToUserProfileResolver<TParent>;
  users?: QueryToUsersResolver<TParent>;
  post?: QueryToPostResolver<TParent>;
  feed?: QueryToFeedResolver<TParent>;
}

export interface QueryToMeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserProfileArgs {
  id: string;
}
export interface QueryToUserProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPostArgs {
  id: string;
}
export interface QueryToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFeedArgs {
  g: GQLGeolocationWhereInput;
  d?: number;
  q?: string;
  startsAt?: GQLDateTime;
  endsAt?: GQLDateTime;
  first?: number;
  skip?: number;
  orderBy?: GQLPostOrderByInput;
}
export interface QueryToFeedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFeedArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  avatar?: UserToAvatarResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  facebookId?: UserToFacebookIdResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  posts?: UserToPostsResolver<TParent>;
  bookmarks?: UserToBookmarksResolver<TParent>;
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFacebookIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBookmarksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPostTypeResolver<TParent = any> {
  id?: PostToIdResolver<TParent>;
  address?: PostToAddressResolver<TParent>;
  postedBy?: PostToPostedByResolver<TParent>;
  title?: PostToTitleResolver<TParent>;
  title_normalized?: PostToTitle_normalizedResolver<TParent>;
  createdAt?: PostToCreatedAtResolver<TParent>;
  updatedAt?: PostToUpdatedAtResolver<TParent>;
  startsAt?: PostToStartsAtResolver<TParent>;
  endsAt?: PostToEndsAtResolver<TParent>;
  geolocation?: PostToGeolocationResolver<TParent>;
  bookmarks?: PostToBookmarksResolver<TParent>;
  photos?: PostToPhotosResolver<TParent>;
  tags?: PostToTagsResolver<TParent>;
  active?: PostToActiveResolver<TParent>;
}

export interface PostToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToPostedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToTitle_normalizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToStartsAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToEndsAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToGeolocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToBookmarksArgs {
  where?: GQLBookmarkWhereInput;
  orderBy?: GQLBookmarkOrderByInput;
  skip?: number;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PostToBookmarksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PostToBookmarksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToPhotosArgs {
  where?: GQLPhotoWhereInput;
  orderBy?: GQLPhotoOrderByInput;
  skip?: number;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PostToPhotosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PostToPhotosArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToTagsArgs {
  where?: GQLTagWhereInput;
  orderBy?: GQLTagOrderByInput;
  skip?: number;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PostToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PostToTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddressTypeResolver<TParent = any> {
  post?: AddressToPostResolver<TParent>;
  singleLine?: AddressToSingleLineResolver<TParent>;
  streetAddress?: AddressToStreetAddressResolver<TParent>;
  city?: AddressToCityResolver<TParent>;
  stateProvince?: AddressToStateProvinceResolver<TParent>;
  postalCode?: AddressToPostalCodeResolver<TParent>;
  country?: AddressToCountryResolver<TParent>;
}

export interface AddressToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToSingleLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToStreetAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToStateProvinceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToPostalCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGeolocationTypeResolver<TParent = any> {
  id?: GeolocationToIdResolver<TParent>;
  lat?: GeolocationToLatResolver<TParent>;
  long?: GeolocationToLongResolver<TParent>;
}

export interface GeolocationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeolocationToLatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeolocationToLongResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBookmarkTypeResolver<TParent = any> {
  id?: BookmarkToIdResolver<TParent>;
  user?: BookmarkToUserResolver<TParent>;
  post?: BookmarkToPostResolver<TParent>;
}

export interface BookmarkToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BookmarkToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BookmarkToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPhotoTypeResolver<TParent = any> {
  id?: PhotoToIdResolver<TParent>;
  url?: PhotoToUrlResolver<TParent>;
  postedBy?: PhotoToPostedByResolver<TParent>;
  post?: PhotoToPostResolver<TParent>;
  title?: PhotoToTitleResolver<TParent>;
  description?: PhotoToDescriptionResolver<TParent>;
  price?: PhotoToPriceResolver<TParent>;
  currency?: PhotoToCurrencyResolver<TParent>;
  active?: PhotoToActiveResolver<TParent>;
}

export interface PhotoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToPostedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagTypeResolver<TParent = any> {
  id?: TagToIdResolver<TParent>;
  name?: TagToNameResolver<TParent>;
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFeedTypeResolver<TParent = any> {
  posts?: FeedToPostsResolver<TParent>;
  count?: FeedToCountResolver<TParent>;
}

export interface FeedToPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FeedToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  editProfile?: MutationToEditProfileResolver<TParent>;
  createPost?: MutationToCreatePostResolver<TParent>;
  editPost?: MutationToEditPostResolver<TParent>;
  editPhoto?: MutationToEditPhotoResolver<TParent>;
  addPhoto?: MutationToAddPhotoResolver<TParent>;
  deletePost?: MutationToDeletePostResolver<TParent>;
  deletePhoto?: MutationToDeletePhotoResolver<TParent>;
  createBookmark?: MutationToCreateBookmarkResolver<TParent>;
  deleteBookmark?: MutationToDeleteBookmarkResolver<TParent>;
}

export interface MutationToEditProfileArgs {
  userId: string;
  photo?: GQLCreatePhotoInput;
  name?: string;
  email?: string;
}
export interface MutationToEditProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEditProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreatePostArgs {
  title: string;
  startsAt: GQLDateTime;
  endsAt: GQLDateTime;
  geolocation?: GQLGeolocationCreateInput;
  photos?: Array<GQLCreatePhotoInput | null>;
  tags?: Array<string>;
  address?: GQLAddressCreateWithoutPostInput;
}
export interface MutationToCreatePostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEditPostArgs {
  postId: string;
  title?: string;
  startsAt?: GQLDateTime;
  endsAt?: GQLDateTime;
  geolocation?: GQLGeolocationCreateInput;
  tags?: Array<string | null>;
  address?: GQLAddressCreateWithoutPostInput;
}
export interface MutationToEditPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEditPostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEditPhotoArgs {
  photoId: string;
  title?: string;
  description?: string;
  price?: number;
  currency?: GQLCurrencyEnum;
}
export interface MutationToEditPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEditPhotoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPhotoArgs {
  postId: string;
  photo: GQLCreatePhotoInput;
}
export interface MutationToAddPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPhotoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePostArgs {
  postId: string;
}
export interface MutationToDeletePostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePhotoArgs {
  photoId: string;
}
export interface MutationToDeletePhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePhotoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateBookmarkArgs {
  postId: string;
}
export interface MutationToCreateBookmarkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateBookmarkArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteBookmarkArgs {
  postId: string;
}
export interface MutationToDeleteBookmarkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteBookmarkArgs, context: any, info: GraphQLResolveInfo): TResult;
}
