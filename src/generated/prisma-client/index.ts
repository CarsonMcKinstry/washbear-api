// Code generated by Prisma (prisma@1.21.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  bookmark: (where?: BookmarkWhereInput) => Promise<boolean>;
  geolocation: (where?: GeolocationWhereInput) => Promise<boolean>;
  photo: (where?: PhotoWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  addresses: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Address>;
  addressesConnection: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AddressConnectionPromise;
  bookmark: (where: BookmarkWhereUniqueInput) => BookmarkPromise;
  bookmarks: (
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Bookmark>;
  bookmarksConnection: (
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BookmarkConnectionPromise;
  geolocation: (where: GeolocationWhereUniqueInput) => GeolocationPromise;
  geolocations: (
    args?: {
      where?: GeolocationWhereInput;
      orderBy?: GeolocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Geolocation>;
  geolocationsConnection: (
    args?: {
      where?: GeolocationWhereInput;
      orderBy?: GeolocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GeolocationConnectionPromise;
  photo: (where: PhotoWhereUniqueInput) => PhotoPromise;
  photos: (
    args?: {
      where?: PhotoWhereInput;
      orderBy?: PhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Photo>;
  photosConnection: (
    args?: {
      where?: PhotoWhereInput;
      orderBy?: PhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PhotoConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagPromise;
  tags: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Tag>;
  tagsConnection: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateManyAddresses: (
    args: { data: AddressUpdateManyMutationInput; where?: AddressWhereInput }
  ) => BatchPayloadPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createBookmark: (data: BookmarkCreateInput) => BookmarkPromise;
  updateBookmark: (
    args: { data: BookmarkUpdateInput; where: BookmarkWhereUniqueInput }
  ) => BookmarkPromise;
  upsertBookmark: (
    args: {
      where: BookmarkWhereUniqueInput;
      create: BookmarkCreateInput;
      update: BookmarkUpdateInput;
    }
  ) => BookmarkPromise;
  deleteBookmark: (where: BookmarkWhereUniqueInput) => BookmarkPromise;
  deleteManyBookmarks: (where?: BookmarkWhereInput) => BatchPayloadPromise;
  createGeolocation: (data: GeolocationCreateInput) => GeolocationPromise;
  updateGeolocation: (
    args: { data: GeolocationUpdateInput; where: GeolocationWhereUniqueInput }
  ) => GeolocationPromise;
  updateManyGeolocations: (
    args: {
      data: GeolocationUpdateManyMutationInput;
      where?: GeolocationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGeolocation: (
    args: {
      where: GeolocationWhereUniqueInput;
      create: GeolocationCreateInput;
      update: GeolocationUpdateInput;
    }
  ) => GeolocationPromise;
  deleteGeolocation: (where: GeolocationWhereUniqueInput) => GeolocationPromise;
  deleteManyGeolocations: (
    where?: GeolocationWhereInput
  ) => BatchPayloadPromise;
  createPhoto: (data: PhotoCreateInput) => PhotoPromise;
  updatePhoto: (
    args: { data: PhotoUpdateInput; where: PhotoWhereUniqueInput }
  ) => PhotoPromise;
  updateManyPhotos: (
    args: { data: PhotoUpdateManyMutationInput; where?: PhotoWhereInput }
  ) => BatchPayloadPromise;
  upsertPhoto: (
    args: {
      where: PhotoWhereUniqueInput;
      create: PhotoCreateInput;
      update: PhotoUpdateInput;
    }
  ) => PhotoPromise;
  deletePhoto: (where: PhotoWhereUniqueInput) => PhotoPromise;
  deleteManyPhotos: (where?: PhotoWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (
    args: { data: TagUpdateInput; where: TagWhereUniqueInput }
  ) => TagPromise;
  updateManyTags: (
    args: { data: TagUpdateManyMutationInput; where?: TagWhereInput }
  ) => BatchPayloadPromise;
  upsertTag: (
    args: {
      where: TagWhereUniqueInput;
      create: TagCreateInput;
      update: TagUpdateInput;
    }
  ) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  bookmark: (
    where?: BookmarkSubscriptionWhereInput
  ) => BookmarkSubscriptionPayloadSubscription;
  geolocation: (
    where?: GeolocationSubscriptionWhereInput
  ) => GeolocationSubscriptionPayloadSubscription;
  photo: (
    where?: PhotoSubscriptionWhereInput
  ) => PhotoSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CurrencyEnum = "USD" | "EUR" | "CAD" | "GBP" | "AUD";

export type AddressOrderByInput =
  | "singleLine_ASC"
  | "singleLine_DESC"
  | "streetAddress_ASC"
  | "streetAddress_DESC"
  | "city_ASC"
  | "city_DESC"
  | "stateProvince_ASC"
  | "stateProvince_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "country_ASC"
  | "country_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BookmarkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "title_normalized_ASC"
  | "title_normalized_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "startsAt_ASC"
  | "startsAt_DESC"
  | "endsAt_ASC"
  | "endsAt_DESC"
  | "active_ASC"
  | "active_DESC";

export type PhotoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "active_ASC"
  | "active_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GeolocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "long_ASC"
  | "long_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "avatar_ASC"
  | "avatar_DESC"
  | "email_ASC"
  | "email_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "facebookId_ASC"
  | "facebookId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AddressUpdateManyMutationInput {
  singleLine?: String;
  streetAddress?: String;
  city?: String;
  stateProvince?: String;
  postalCode?: String;
  country?: String;
}

export interface AddressWhereInput {
  post?: PostWhereInput;
  singleLine?: String;
  singleLine_not?: String;
  singleLine_in?: String[] | String;
  singleLine_not_in?: String[] | String;
  singleLine_lt?: String;
  singleLine_lte?: String;
  singleLine_gt?: String;
  singleLine_gte?: String;
  singleLine_contains?: String;
  singleLine_not_contains?: String;
  singleLine_starts_with?: String;
  singleLine_not_starts_with?: String;
  singleLine_ends_with?: String;
  singleLine_not_ends_with?: String;
  streetAddress?: String;
  streetAddress_not?: String;
  streetAddress_in?: String[] | String;
  streetAddress_not_in?: String[] | String;
  streetAddress_lt?: String;
  streetAddress_lte?: String;
  streetAddress_gt?: String;
  streetAddress_gte?: String;
  streetAddress_contains?: String;
  streetAddress_not_contains?: String;
  streetAddress_starts_with?: String;
  streetAddress_not_starts_with?: String;
  streetAddress_ends_with?: String;
  streetAddress_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  stateProvince?: String;
  stateProvince_not?: String;
  stateProvince_in?: String[] | String;
  stateProvince_not_in?: String[] | String;
  stateProvince_lt?: String;
  stateProvince_lte?: String;
  stateProvince_gt?: String;
  stateProvince_gte?: String;
  stateProvince_contains?: String;
  stateProvince_not_contains?: String;
  stateProvince_starts_with?: String;
  stateProvince_not_starts_with?: String;
  stateProvince_ends_with?: String;
  stateProvince_not_ends_with?: String;
  postalCode?: String;
  postalCode_not?: String;
  postalCode_in?: String[] | String;
  postalCode_not_in?: String[] | String;
  postalCode_lt?: String;
  postalCode_lte?: String;
  postalCode_gt?: String;
  postalCode_gte?: String;
  postalCode_contains?: String;
  postalCode_not_contains?: String;
  postalCode_starts_with?: String;
  postalCode_not_starts_with?: String;
  postalCode_ends_with?: String;
  postalCode_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  AND?: AddressWhereInput[] | AddressWhereInput;
  OR?: AddressWhereInput[] | AddressWhereInput;
  NOT?: AddressWhereInput[] | AddressWhereInput;
}

export interface BookmarkCreateWithoutUserInput {
  post: PostCreateOneWithoutBookmarksInput;
}

export interface UserUpdateWithoutPostsDataInput {
  avatar?: String;
  email?: String;
  name?: String;
  password?: String;
  facebookId?: String;
  bookmarks?: BookmarkUpdateManyWithoutUserInput;
}

export interface PostCreateOneWithoutBookmarksInput {
  create?: PostCreateWithoutBookmarksInput;
  connect?: PostWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutBookmarksInput {
  create?: UserCreateWithoutBookmarksInput;
  update?: UserUpdateWithoutBookmarksDataInput;
  upsert?: UserUpsertWithoutBookmarksInput;
  connect?: UserWhereUniqueInput;
}

export interface PostCreateWithoutBookmarksInput {
  address?: AddressCreateOneWithoutPostInput;
  postedBy: UserCreateOneWithoutPostsInput;
  title: String;
  title_normalized: String;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  geolocation?: GeolocationCreateOneInput;
  photos?: PhotoCreateManyWithoutPostInput;
  tags?: TagCreateManyInput;
  active?: Boolean;
}

export interface PhotoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  postedBy?: UserWhereInput;
  post?: PostWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  currency?: CurrencyEnum;
  currency_not?: CurrencyEnum;
  currency_in?: CurrencyEnum[] | CurrencyEnum;
  currency_not_in?: CurrencyEnum[] | CurrencyEnum;
  active?: Boolean;
  active_not?: Boolean;
  AND?: PhotoWhereInput[] | PhotoWhereInput;
  OR?: PhotoWhereInput[] | PhotoWhereInput;
  NOT?: PhotoWhereInput[] | PhotoWhereInput;
}

export interface AddressCreateOneWithoutPostInput {
  create?: AddressCreateWithoutPostInput;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TagWhereInput;
  AND?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  OR?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  NOT?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
}

export interface AddressCreateWithoutPostInput {
  singleLine: String;
  streetAddress: String;
  city: String;
  stateProvince: String;
  postalCode: String;
  country: String;
}

export interface PhotoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PhotoWhereInput;
  AND?: PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput;
  OR?: PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput;
  NOT?: PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput;
}

export interface GeolocationCreateOneInput {
  create?: GeolocationCreateInput;
  connect?: GeolocationWhereUniqueInput;
}

export interface GeolocationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  lat?: Float;
  lat_not?: Float;
  lat_in?: Float[] | Float;
  lat_not_in?: Float[] | Float;
  lat_lt?: Float;
  lat_lte?: Float;
  lat_gt?: Float;
  lat_gte?: Float;
  long?: Float;
  long_not?: Float;
  long_in?: Float[] | Float;
  long_not_in?: Float[] | Float;
  long_lt?: Float;
  long_lte?: Float;
  long_gt?: Float;
  long_gte?: Float;
  AND?: GeolocationWhereInput[] | GeolocationWhereInput;
  OR?: GeolocationWhereInput[] | GeolocationWhereInput;
  NOT?: GeolocationWhereInput[] | GeolocationWhereInput;
}

export interface GeolocationCreateInput {
  lat: Float;
  long: Float;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AddressWhereInput;
  AND?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
  OR?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
  NOT?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
}

export interface PhotoCreateManyWithoutPostInput {
  create?: PhotoCreateWithoutPostInput[] | PhotoCreateWithoutPostInput;
  connect?: PhotoWhereUniqueInput[] | PhotoWhereUniqueInput;
}

export interface BookmarkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  post?: PostWhereInput;
  AND?: BookmarkWhereInput[] | BookmarkWhereInput;
  OR?: BookmarkWhereInput[] | BookmarkWhereInput;
  NOT?: BookmarkWhereInput[] | BookmarkWhereInput;
}

export interface PhotoCreateWithoutPostInput {
  url: String;
  postedBy: UserCreateOneInput;
  title?: String;
  description?: String;
  price?: Int;
  currency?: CurrencyEnum;
  active?: Boolean;
}

export interface TagUpdateManyMutationInput {
  name?: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface PostUpdateManyMutationInput {
  title?: String;
  title_normalized?: String;
  startsAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  active?: Boolean;
}

export interface UserCreateInput {
  avatar?: String;
  email?: String;
  name: String;
  password?: String;
  facebookId?: String;
  bookmarks?: BookmarkCreateManyWithoutUserInput;
  posts?: PostCreateManyWithoutPostedByInput;
}

export type BookmarkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostCreateManyWithoutPostedByInput {
  create?: PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PhotoUpdateManyMutationInput {
  url?: String;
  title?: String;
  description?: String;
  price?: Int;
  currency?: CurrencyEnum;
  active?: Boolean;
}

export interface PostCreateWithoutPostedByInput {
  address?: AddressCreateOneWithoutPostInput;
  title: String;
  title_normalized: String;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  geolocation?: GeolocationCreateOneInput;
  bookmarks?: BookmarkCreateManyWithoutPostInput;
  photos?: PhotoCreateManyWithoutPostInput;
  tags?: TagCreateManyInput;
  active?: Boolean;
}

export type GeolocationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BookmarkCreateManyWithoutPostInput {
  create?: BookmarkCreateWithoutPostInput[] | BookmarkCreateWithoutPostInput;
  connect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
}

export interface PostUpdateOneRequiredWithoutPhotosInput {
  create?: PostCreateWithoutPhotosInput;
  update?: PostUpdateWithoutPhotosDataInput;
  upsert?: PostUpsertWithoutPhotosInput;
  connect?: PostWhereUniqueInput;
}

export interface BookmarkCreateWithoutPostInput {
  user: UserCreateOneWithoutBookmarksInput;
}

export interface PostCreateWithoutPhotosInput {
  address?: AddressCreateOneWithoutPostInput;
  postedBy: UserCreateOneWithoutPostsInput;
  title: String;
  title_normalized: String;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  geolocation?: GeolocationCreateOneInput;
  bookmarks?: BookmarkCreateManyWithoutPostInput;
  tags?: TagCreateManyInput;
  active?: Boolean;
}

export interface UserCreateOneWithoutBookmarksInput {
  create?: UserCreateWithoutBookmarksInput;
  connect?: UserWhereUniqueInput;
}

export interface PostCreateOneWithoutPhotosInput {
  create?: PostCreateWithoutPhotosInput;
  connect?: PostWhereUniqueInput;
}

export interface UserCreateWithoutBookmarksInput {
  avatar?: String;
  email?: String;
  name: String;
  password?: String;
  facebookId?: String;
  posts?: PostCreateManyWithoutPostedByInput;
}

export interface GeolocationUpdateManyMutationInput {
  lat?: Float;
  long?: Float;
}

export interface TagCreateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface GeolocationUpdateInput {
  lat?: Float;
  long?: Float;
}

export interface TagCreateInput {
  name: String;
}

export interface PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPostedByDataInput;
  create: PostCreateWithoutPostedByInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  address?: AddressWhereInput;
  postedBy?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  title_normalized?: String;
  title_normalized_not?: String;
  title_normalized_in?: String[] | String;
  title_normalized_not_in?: String[] | String;
  title_normalized_lt?: String;
  title_normalized_lte?: String;
  title_normalized_gt?: String;
  title_normalized_gte?: String;
  title_normalized_contains?: String;
  title_normalized_not_contains?: String;
  title_normalized_starts_with?: String;
  title_normalized_not_starts_with?: String;
  title_normalized_ends_with?: String;
  title_normalized_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  startsAt?: DateTimeInput;
  startsAt_not?: DateTimeInput;
  startsAt_in?: DateTimeInput[] | DateTimeInput;
  startsAt_not_in?: DateTimeInput[] | DateTimeInput;
  startsAt_lt?: DateTimeInput;
  startsAt_lte?: DateTimeInput;
  startsAt_gt?: DateTimeInput;
  startsAt_gte?: DateTimeInput;
  endsAt?: DateTimeInput;
  endsAt_not?: DateTimeInput;
  endsAt_in?: DateTimeInput[] | DateTimeInput;
  endsAt_not_in?: DateTimeInput[] | DateTimeInput;
  endsAt_lt?: DateTimeInput;
  endsAt_lte?: DateTimeInput;
  endsAt_gt?: DateTimeInput;
  endsAt_gte?: DateTimeInput;
  geolocation?: GeolocationWhereInput;
  bookmarks_every?: BookmarkWhereInput;
  bookmarks_some?: BookmarkWhereInput;
  bookmarks_none?: BookmarkWhereInput;
  photos_every?: PhotoWhereInput;
  photos_some?: PhotoWhereInput;
  photos_none?: PhotoWhereInput;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  active?: Boolean;
  active_not?: Boolean;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PhotoUpsertWithWhereUniqueWithoutPostInput {
  where: PhotoWhereUniqueInput;
  update: PhotoUpdateWithoutPostDataInput;
  create: PhotoCreateWithoutPostInput;
}

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export interface BookmarkUpsertWithWhereUniqueWithoutUserInput {
  where: BookmarkWhereUniqueInput;
  update: BookmarkUpdateWithoutUserDataInput;
  create: BookmarkCreateWithoutUserInput;
}

export interface TagUpdateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  update?:
    | TagUpdateWithWhereUniqueNestedInput[]
    | TagUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TagUpsertWithWhereUniqueNestedInput[]
    | TagUpsertWithWhereUniqueNestedInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface UserWhereInput {
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  facebookId?: String;
  facebookId_not?: String;
  facebookId_in?: String[] | String;
  facebookId_not_in?: String[] | String;
  facebookId_lt?: String;
  facebookId_lte?: String;
  facebookId_gt?: String;
  facebookId_gte?: String;
  facebookId_contains?: String;
  facebookId_not_contains?: String;
  facebookId_starts_with?: String;
  facebookId_not_starts_with?: String;
  facebookId_ends_with?: String;
  facebookId_not_ends_with?: String;
  bookmarks_every?: BookmarkWhereInput;
  bookmarks_some?: BookmarkWhereInput;
  bookmarks_none?: BookmarkWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface BookmarkCreateInput {
  user: UserCreateOneWithoutBookmarksInput;
  post: PostCreateOneWithoutBookmarksInput;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface BookmarkUpdateInput {
  user?: UserUpdateOneRequiredWithoutBookmarksInput;
  post?: PostUpdateOneRequiredWithoutBookmarksInput;
}

export interface PostCreateOneWithoutAddressInput {
  create?: PostCreateWithoutAddressInput;
  connect?: PostWhereUniqueInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutBookmarksDataInput {
  avatar?: String;
  email?: String;
  name?: String;
  password?: String;
  facebookId?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
}

export interface BookmarkCreateManyWithoutUserInput {
  create?: BookmarkCreateWithoutUserInput[] | BookmarkCreateWithoutUserInput;
  connect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
}

export interface PostUpdateManyWithoutPostedByInput {
  create?: PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutPostedByInput[]
    | PostUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutPostedByInput[]
    | PostUpsertWithWhereUniqueWithoutPostedByInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPostedByDataInput;
}

export interface GeolocationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GeolocationWhereInput;
  AND?: GeolocationSubscriptionWhereInput[] | GeolocationSubscriptionWhereInput;
  OR?: GeolocationSubscriptionWhereInput[] | GeolocationSubscriptionWhereInput;
  NOT?: GeolocationSubscriptionWhereInput[] | GeolocationSubscriptionWhereInput;
}

export interface PostUpdateWithoutPostedByDataInput {
  address?: AddressUpdateOneWithoutPostInput;
  title?: String;
  title_normalized?: String;
  startsAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  geolocation?: GeolocationUpdateOneInput;
  bookmarks?: BookmarkUpdateManyWithoutPostInput;
  photos?: PhotoUpdateManyWithoutPostInput;
  tags?: TagUpdateManyInput;
  active?: Boolean;
}

export interface UserUpdateManyMutationInput {
  avatar?: String;
  email?: String;
  name?: String;
  password?: String;
  facebookId?: String;
}

export interface AddressUpdateOneWithoutPostInput {
  create?: AddressCreateWithoutPostInput;
  update?: AddressUpdateWithoutPostDataInput;
  upsert?: AddressUpsertWithoutPostInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface TagUpdateInput {
  name?: String;
}

export interface AddressUpdateWithoutPostDataInput {
  singleLine?: String;
  streetAddress?: String;
  city?: String;
  stateProvince?: String;
  postalCode?: String;
  country?: String;
}

export interface PostCreateInput {
  address?: AddressCreateOneWithoutPostInput;
  postedBy: UserCreateOneWithoutPostsInput;
  title: String;
  title_normalized: String;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  geolocation?: GeolocationCreateOneInput;
  bookmarks?: BookmarkCreateManyWithoutPostInput;
  photos?: PhotoCreateManyWithoutPostInput;
  tags?: TagCreateManyInput;
  active?: Boolean;
}

export interface AddressUpsertWithoutPostInput {
  update: AddressUpdateWithoutPostDataInput;
  create: AddressCreateWithoutPostInput;
}

export interface PostUpdateWithoutPhotosDataInput {
  address?: AddressUpdateOneWithoutPostInput;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  title?: String;
  title_normalized?: String;
  startsAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  geolocation?: GeolocationUpdateOneInput;
  bookmarks?: BookmarkUpdateManyWithoutPostInput;
  tags?: TagUpdateManyInput;
  active?: Boolean;
}

export interface GeolocationUpdateOneInput {
  create?: GeolocationCreateInput;
  update?: GeolocationUpdateDataInput;
  upsert?: GeolocationUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GeolocationWhereUniqueInput;
}

export type PhotoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GeolocationUpdateDataInput {
  lat?: Float;
  long?: Float;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GeolocationUpsertNestedInput {
  update: GeolocationUpdateDataInput;
  create: GeolocationCreateInput;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BookmarkUpdateManyWithoutPostInput {
  create?: BookmarkCreateWithoutPostInput[] | BookmarkCreateWithoutPostInput;
  delete?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  connect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  disconnect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  update?:
    | BookmarkUpdateWithWhereUniqueWithoutPostInput[]
    | BookmarkUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | BookmarkUpsertWithWhereUniqueWithoutPostInput[]
    | BookmarkUpsertWithWhereUniqueWithoutPostInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  email: String;
  id?: ID_Input;
  facebookId?: String;
}>;

export interface BookmarkUpdateWithWhereUniqueWithoutPostInput {
  where: BookmarkWhereUniqueInput;
  data: BookmarkUpdateWithoutPostDataInput;
}

export interface TagUpdateDataInput {
  name?: String;
}

export interface BookmarkUpdateWithoutPostDataInput {
  user?: UserUpdateOneRequiredWithoutBookmarksInput;
}

export interface PostCreateWithoutAddressInput {
  postedBy: UserCreateOneWithoutPostsInput;
  title: String;
  title_normalized: String;
  startsAt: DateTimeInput;
  endsAt: DateTimeInput;
  geolocation?: GeolocationCreateOneInput;
  bookmarks?: BookmarkCreateManyWithoutPostInput;
  photos?: PhotoCreateManyWithoutPostInput;
  tags?: TagCreateManyInput;
  active?: Boolean;
}

export interface BookmarkUpsertWithWhereUniqueWithoutPostInput {
  where: BookmarkWhereUniqueInput;
  update: BookmarkUpdateWithoutPostDataInput;
  create: BookmarkCreateWithoutPostInput;
}

export interface TagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: TagWhereInput[] | TagWhereInput;
  OR?: TagWhereInput[] | TagWhereInput;
  NOT?: TagWhereInput[] | TagWhereInput;
}

export interface PhotoUpdateManyWithoutPostInput {
  create?: PhotoCreateWithoutPostInput[] | PhotoCreateWithoutPostInput;
  delete?: PhotoWhereUniqueInput[] | PhotoWhereUniqueInput;
  connect?: PhotoWhereUniqueInput[] | PhotoWhereUniqueInput;
  disconnect?: PhotoWhereUniqueInput[] | PhotoWhereUniqueInput;
  update?:
    | PhotoUpdateWithWhereUniqueWithoutPostInput[]
    | PhotoUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | PhotoUpsertWithWhereUniqueWithoutPostInput[]
    | PhotoUpsertWithWhereUniqueWithoutPostInput;
}

export interface BookmarkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BookmarkWhereInput;
  AND?: BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput;
  OR?: BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput;
  NOT?: BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput;
}

export interface PhotoUpdateWithWhereUniqueWithoutPostInput {
  where: PhotoWhereUniqueInput;
  data: PhotoUpdateWithoutPostDataInput;
}

export interface PostUpdateInput {
  address?: AddressUpdateOneWithoutPostInput;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  title?: String;
  title_normalized?: String;
  startsAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  geolocation?: GeolocationUpdateOneInput;
  bookmarks?: BookmarkUpdateManyWithoutPostInput;
  photos?: PhotoUpdateManyWithoutPostInput;
  tags?: TagUpdateManyInput;
  active?: Boolean;
}

export interface PhotoUpdateWithoutPostDataInput {
  url?: String;
  postedBy?: UserUpdateOneRequiredInput;
  title?: String;
  description?: String;
  price?: Int;
  currency?: CurrencyEnum;
  active?: Boolean;
}

export interface PhotoUpdateInput {
  url?: String;
  postedBy?: UserUpdateOneRequiredInput;
  post?: PostUpdateOneRequiredWithoutPhotosInput;
  title?: String;
  description?: String;
  price?: Int;
  currency?: CurrencyEnum;
  active?: Boolean;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutBookmarksInput {
  update: UserUpdateWithoutBookmarksDataInput;
  create: UserCreateWithoutBookmarksInput;
}

export interface UserUpdateDataInput {
  avatar?: String;
  email?: String;
  name?: String;
  password?: String;
  facebookId?: String;
  bookmarks?: BookmarkUpdateManyWithoutUserInput;
  posts?: PostUpdateManyWithoutPostedByInput;
}

export interface PostUpsertWithoutBookmarksInput {
  update: PostUpdateWithoutBookmarksDataInput;
  create: PostCreateWithoutBookmarksInput;
}

export interface BookmarkUpdateManyWithoutUserInput {
  create?: BookmarkCreateWithoutUserInput[] | BookmarkCreateWithoutUserInput;
  delete?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  connect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  disconnect?: BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput;
  update?:
    | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    | BookmarkUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    | BookmarkUpsertWithWhereUniqueWithoutUserInput;
}

export interface UserCreateWithoutPostsInput {
  avatar?: String;
  email?: String;
  name: String;
  password?: String;
  facebookId?: String;
  bookmarks?: BookmarkCreateManyWithoutUserInput;
}

export interface BookmarkUpdateWithWhereUniqueWithoutUserInput {
  where: BookmarkWhereUniqueInput;
  data: BookmarkUpdateWithoutUserDataInput;
}

export interface UserUpdateInput {
  avatar?: String;
  email?: String;
  name?: String;
  password?: String;
  facebookId?: String;
  bookmarks?: BookmarkUpdateManyWithoutUserInput;
  posts?: PostUpdateManyWithoutPostedByInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface PostUpdateWithoutBookmarksDataInput {
  address?: AddressUpdateOneWithoutPostInput;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  title?: String;
  title_normalized?: String;
  startsAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  geolocation?: GeolocationUpdateOneInput;
  photos?: PhotoUpdateManyWithoutPostInput;
  tags?: TagUpdateManyInput;
  active?: Boolean;
}

export interface PostUpdateOneRequiredWithoutBookmarksInput {
  create?: PostCreateWithoutBookmarksInput;
  update?: PostUpdateWithoutBookmarksDataInput;
  upsert?: PostUpsertWithoutBookmarksInput;
  connect?: PostWhereUniqueInput;
}

export interface BookmarkUpdateWithoutUserDataInput {
  post?: PostUpdateOneRequiredWithoutBookmarksInput;
}

export interface PostUpsertWithoutPhotosInput {
  update: PostUpdateWithoutPhotosDataInput;
  create: PostCreateWithoutPhotosInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface AddressCreateInput {
  post: PostCreateOneWithoutAddressInput;
  singleLine: String;
  streetAddress: String;
  city: String;
  stateProvince: String;
  postalCode: String;
  country: String;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PhotoCreateInput {
  url: String;
  postedBy: UserCreateOneInput;
  post: PostCreateOneWithoutPhotosInput;
  title?: String;
  description?: String;
  price?: Int;
  currency?: CurrencyEnum;
  active?: Boolean;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  avatar?: String;
  email?: String;
  id: ID_Output;
  name: String;
  password?: String;
  facebookId?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  facebookId: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  avatar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  facebookId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  title_normalized: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  startsAt: DateTimeOutput;
  endsAt: DateTimeOutput;
  active: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  title_normalized: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  startsAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  title_normalized: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
}

export interface AddressEdge {
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressConnection {}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Address {
  singleLine: String;
  streetAddress: String;
  city: String;
  stateProvince: String;
  postalCode: String;
  country: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  post: <T = PostPromise>() => T;
  singleLine: () => Promise<String>;
  streetAddress: () => Promise<String>;
  city: () => Promise<String>;
  stateProvince: () => Promise<String>;
  postalCode: () => Promise<String>;
  country: () => Promise<String>;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  post: <T = PostSubscription>() => T;
  singleLine: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  stateProvince: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Tag {
  id: ID_Output;
  name: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TagEdge {
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Photo {
  id: ID_Output;
  url: String;
  title?: String;
  description?: String;
  price?: Int;
  currency?: CurrencyEnum;
  active: Boolean;
}

export interface PhotoPromise extends Promise<Photo>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  currency: () => Promise<CurrencyEnum>;
  active: () => Promise<Boolean>;
}

export interface PhotoSubscription
  extends Promise<AsyncIterator<Photo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<CurrencyEnum>>;
  active: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface PhotoEdge {
  cursor: String;
}

export interface PhotoEdgePromise extends Promise<PhotoEdge>, Fragmentable {
  node: <T = PhotoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PhotoEdgeSubscription
  extends Promise<AsyncIterator<PhotoEdge>>,
    Fragmentable {
  node: <T = PhotoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AggregateGeolocation {
  count: Int;
}

export interface AggregateGeolocationPromise
  extends Promise<AggregateGeolocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGeolocationSubscription
  extends Promise<AsyncIterator<AggregateGeolocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressPreviousValues {
  singleLine: String;
  streetAddress: String;
  city: String;
  stateProvince: String;
  postalCode: String;
  country: String;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  singleLine: () => Promise<String>;
  streetAddress: () => Promise<String>;
  city: () => Promise<String>;
  stateProvince: () => Promise<String>;
  postalCode: () => Promise<String>;
  country: () => Promise<String>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  singleLine: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  stateProvince: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
}

export interface GeolocationConnection {}

export interface GeolocationConnectionPromise
  extends Promise<GeolocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GeolocationEdge>>() => T;
  aggregate: <T = AggregateGeolocationPromise>() => T;
}

export interface GeolocationConnectionSubscription
  extends Promise<AsyncIterator<GeolocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GeolocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGeolocationSubscription>() => T;
}

export interface Geolocation {
  id: ID_Output;
  lat: Float;
  long: Float;
}

export interface GeolocationPromise extends Promise<Geolocation>, Fragmentable {
  id: () => Promise<ID_Output>;
  lat: () => Promise<Float>;
  long: () => Promise<Float>;
}

export interface GeolocationSubscription
  extends Promise<AsyncIterator<Geolocation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lat: () => Promise<AsyncIterator<Float>>;
  long: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateBookmark {
  count: Int;
}

export interface AggregateBookmarkPromise
  extends Promise<AggregateBookmark>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookmarkSubscription
  extends Promise<AsyncIterator<AggregateBookmark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookmarkSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface BookmarkSubscriptionPayloadPromise
  extends Promise<BookmarkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookmarkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookmarkPreviousValuesPromise>() => T;
}

export interface BookmarkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookmarkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookmarkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookmarkPreviousValuesSubscription>() => T;
}

export interface BookmarkConnection {}

export interface BookmarkConnectionPromise
  extends Promise<BookmarkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookmarkEdge>>() => T;
  aggregate: <T = AggregateBookmarkPromise>() => T;
}

export interface BookmarkConnectionSubscription
  extends Promise<AsyncIterator<BookmarkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookmarkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookmarkSubscription>() => T;
}

export interface BookmarkPreviousValues {
  id: ID_Output;
}

export interface BookmarkPreviousValuesPromise
  extends Promise<BookmarkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface BookmarkPreviousValuesSubscription
  extends Promise<AsyncIterator<BookmarkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Bookmark {
  id: ID_Output;
}

export interface BookmarkPromise extends Promise<Bookmark>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
}

export interface BookmarkSubscription
  extends Promise<AsyncIterator<Bookmark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
}

export interface TagConnection {}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface GeolocationSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GeolocationSubscriptionPayloadPromise
  extends Promise<GeolocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GeolocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GeolocationPreviousValuesPromise>() => T;
}

export interface GeolocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GeolocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GeolocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GeolocationPreviousValuesSubscription>() => T;
}

export interface AggregatePhoto {
  count: Int;
}

export interface AggregatePhotoPromise
  extends Promise<AggregatePhoto>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhotoSubscription
  extends Promise<AsyncIterator<AggregatePhoto>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GeolocationPreviousValues {
  id: ID_Output;
  lat: Float;
  long: Float;
}

export interface GeolocationPreviousValuesPromise
  extends Promise<GeolocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lat: () => Promise<Float>;
  long: () => Promise<Float>;
}

export interface GeolocationPreviousValuesSubscription
  extends Promise<AsyncIterator<GeolocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lat: () => Promise<AsyncIterator<Float>>;
  long: () => Promise<AsyncIterator<Float>>;
}

export interface GeolocationEdge {
  cursor: String;
}

export interface GeolocationEdgePromise
  extends Promise<GeolocationEdge>,
    Fragmentable {
  node: <T = GeolocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GeolocationEdgeSubscription
  extends Promise<AsyncIterator<GeolocationEdge>>,
    Fragmentable {
  node: <T = GeolocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  title_normalized: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  startsAt: DateTimeOutput;
  endsAt: DateTimeOutput;
  active: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: <T = AddressPromise>() => T;
  postedBy: <T = UserPromise>() => T;
  title: () => Promise<String>;
  title_normalized: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  startsAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  geolocation: <T = GeolocationPromise>() => T;
  bookmarks: <T = FragmentableArray<Bookmark>>(
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = FragmentableArray<Photo>>(
    args?: {
      where?: PhotoWhereInput;
      orderBy?: PhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tags: <T = FragmentableArray<Tag>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  active: () => Promise<Boolean>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: <T = AddressSubscription>() => T;
  postedBy: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  title_normalized: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  geolocation: <T = GeolocationSubscription>() => T;
  bookmarks: <T = Promise<AsyncIterator<BookmarkSubscription>>>(
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = Promise<AsyncIterator<PhotoSubscription>>>(
    args?: {
      where?: PhotoWhereInput;
      orderBy?: PhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  active: () => Promise<AsyncIterator<Boolean>>;
}

export interface BookmarkEdge {
  cursor: String;
}

export interface BookmarkEdgePromise
  extends Promise<BookmarkEdge>,
    Fragmentable {
  node: <T = BookmarkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookmarkEdgeSubscription
  extends Promise<AsyncIterator<BookmarkEdge>>,
    Fragmentable {
  node: <T = BookmarkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface User {
  avatar?: String;
  email?: String;
  id: ID_Output;
  name: String;
  password?: String;
  facebookId?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  facebookId: () => Promise<String>;
  bookmarks: <T = FragmentableArray<Bookmark>>(
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  avatar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  facebookId: () => Promise<AsyncIterator<String>>;
  bookmarks: <T = Promise<AsyncIterator<BookmarkSubscription>>>(
    args?: {
      where?: BookmarkWhereInput;
      orderBy?: BookmarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PhotoPreviousValues {
  id: ID_Output;
  url: String;
  title?: String;
  description?: String;
  price?: Int;
  currency?: CurrencyEnum;
  active: Boolean;
}

export interface PhotoPreviousValuesPromise
  extends Promise<PhotoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  currency: () => Promise<CurrencyEnum>;
  active: () => Promise<Boolean>;
}

export interface PhotoPreviousValuesSubscription
  extends Promise<AsyncIterator<PhotoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<CurrencyEnum>>;
  active: () => Promise<AsyncIterator<Boolean>>;
}

export interface PhotoSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PhotoSubscriptionPayloadPromise
  extends Promise<PhotoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PhotoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PhotoPreviousValuesPromise>() => T;
}

export interface PhotoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhotoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PhotoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PhotoPreviousValuesSubscription>() => T;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PhotoConnection {}

export interface PhotoConnectionPromise
  extends Promise<PhotoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PhotoEdge>>() => T;
  aggregate: <T = AggregatePhotoPromise>() => T;
}

export interface PhotoConnectionSubscription
  extends Promise<AsyncIterator<PhotoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PhotoEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePhotoSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Bookmark",
    embedded: false
  },
  {
    name: "CurrencyEnum",
    embedded: false
  },
  {
    name: "Geolocation",
    embedded: false
  },
  {
    name: "Photo",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
  secret: `${process.env["SECRET"]}`
});
export const prisma = new Prisma();
