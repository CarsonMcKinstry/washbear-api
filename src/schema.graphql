# import Post, Bookmark, Tag from './generated/prisma.graphql'
# import CurrencyEnum from './generated/prisma.graphql'
# import GeolocationWhereInput, GeolocationCreateInput from './generated/prisma.graphql'
# import PostOrderByInput, PostUpdateInput from './generated/prisma.graphql'
# import AddressCreateWithoutPostInput from './generated/prisma.graphql'

scalar Upload

type Query {
  me: User
  userProfile(id: ID!): User
  users: [User!]!
  post(id: ID!): Post
  feed( 
    g: GeolocationWhereInput!,
    d: Int,
    q: String,
    startsAt: DateTime,
    endsAt: DateTime
    first: Int,
    skip: Int,
    orderBy: PostOrderByInput
  ): Feed!
}

type Mutation {
  editProfile (
    userId: ID!
    photo: CreatePhotoInput
    name: String
    email: String
  ): User!
  createPost (
    title: String!
    startsAt: DateTime!
    endsAt: DateTime!
    geolocation: GeolocationCreateInput
    photos: [CreatePhotoInput]
    tags: [String!]
    address: AddressCreateWithoutPostInput
  ): Post!
  editPost (
    postId: ID!
    title: String
    startsAt: DateTime
    endsAt: DateTime
    geolocation: GeolocationCreateInput
    tags: [String]
    address: AddressCreateWithoutPostInput
  ): Post!
  editPhoto (
    photoId: ID!
    title: String
    description: String
    price: Int
    currency: CurrencyEnum
  ): Photo!
  addPhoto (
    postId: ID!
    photo: CreatePhotoInput!
  ): Photo!
  deletePost (postId: ID!): Post!
  deletePhoto (photoId: ID!): Photo!
  createBookmark (
    postId: ID!
  ): Bookmark!
  deleteBookmark (
    postId: ID!
  ): Bookmark
} 

type Feed {
  posts: [Post!]!
  count: Int!
}

type User {
  avatar: String
  email: String
  facebookId: String
  id: ID!
  name: String!
  posts: [Post!]
  bookmarks: [Bookmark!]
}

input CreatePhotoInput {
  url: String
  file: Upload
  title: String
  description: String
  price: Int
  currency: CurrencyEnum
}
